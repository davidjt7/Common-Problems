/* 
A left rotation operation on an array shifts each of the array's elements 1 unit to the left. For example, if 2 left rotations are performed on array [2, 4, 7, 2, 3], then the array would become [7, 2, 3, 2, 4]

Following is the example of Sum of (array value) * (array index) for foollowing arrays

  1. [7, 2, 3, 2, 4] 
  
  (7 * 0) + (2 * 1) + (3 * 2) + (2 * 3) + (4 * 4) =  30
  
  2. [3, 4, 2, 1, 5]
  
  (3 * 0) + (4 * 1) + (2 * 2) + (1 * 3) + (5 * 4) =  31
  
  3. [6, 99, 4]
  
  (6 * 0) + (99 * 1) + (4 * 2) =  107
  
  
Write a function which takes input as an array of any given length and returns number of left rotation needed for input array to have minimum sum of (array value) * (array index)

For example, for an array [7, 2, 3, 2, 4] following is the list of rotation and corresponding sum of (array value) * (array index)

No. of rotation  Array            Value
---------------  -------         -------
    0          [7, 2, 3, 2, 4]    30
    1          [2, 3, 2, 4, 7]    47
    2          [3, 2, 4, 7, 2]    39
    3          [2, 4, 7, 2, 3]    36
    4          [4, 7, 2, 3, 2]    28

So the number of rotations needed to get minimal value is 4

P.S: 
* You are free to use any either JavaScript, Java, PHP or python to implement a solution for the same in the provided coderpad editor.
* Try to implement the solution with least complexity as possible (Most optimal way with minimal number of iterations if possible)
*/


